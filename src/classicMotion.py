import cv2
import datetime

# Drop Keys
# Data\\RegularCamDropKey.mp4

# Drop Tennis ball
# Data\\tennis_classic_vdo.mp4

cap = cv2.VideoCapture("Data\\tennis_classic_vdo.mp4")  

# Read the two first frames of the video
ret, frame1 = cap.read()
ret, frame2 = cap.read()

# Start a timer
start = datetime.datetime.now()
timer_lst = []

while(cap.isOpened()):

    #Pr√©traitment des image

    # Check the difference between an image and its previous one by comparing the two pixel arrays
    diff = cv2.absdiff(frame1,frame2)
    
    # Convert the image to gray scale
    gray = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)

    # Noise is generated by details. Gaussian BLur get rid of it
    blur = cv2.GaussianBlur(gray, (5,5), 0)

    # Convert it in a binary image in function of the given treshold
    _,thresh = cv2.threshold(blur, 20, 255, cv2.THRESH_BINARY)

    # Expands the contours of object in an image by enlarging the white pixels around the dark areas
    dilated = cv2.dilate(thresh, None, iterations=3)
    
    # Detect and extract contours of an image
    contours, _ = cv2.findContours(dilated, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    # Visual marking when detection 
    for contour in contours:
        (x, y, w, h) = cv2.boundingRect(contour)
        
        if(cv2.contourArea(contour) < 2000 or cv2.contourArea(contour) > 10000):
            continue
            
        # Stop the timer and get the time in ms
        end = datetime.datetime.now()
        t = end-start
        timer_lst.append(t.microseconds/1000)

        # Draw rectangle around  the moving object
        cv2.rectangle(frame1, (x,y), (x+w, y+h), (0,0,255), 2)
        cv2.putText(frame1, "Status: {}".format('Movement'), (300,100), cv2.FONT_HERSHEY_COMPLEX_SMALL, 1, (255,0,0), 2)
    
    if(timer_lst):

        # Display timer on screen
        cv2.putText(frame1, str("Time of detection: {}".format(timer_lst[0])) + " ms", (300,150), cv2.FONT_HERSHEY_COMPLEX_SMALL, 1, (0,0,255), 2)

    cv2.imshow('feed', frame1)

    # Frame 1 is now replaced by frame 2
    frame1 = frame2
    # Read the following frame
    ret , frame2 = cap.read()

    if(cv2.waitKey(40) == 27):
        break

cv2.destroyAllWindows()
cap.release()   

